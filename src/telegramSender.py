import telebot
from apscheduler.schedulers.background import BackgroundScheduler
import time
import pandas as pd
import os
from datetime import datetime
import logging
from dotenv import load_dotenv
import pytz
from apscheduler.triggers.cron import CronTrigger
import chatgpt_context 
import sys
import socket
import json
import re

# Get the absolute path to the .env file
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
env_path = os.path.join(parent_dir, '.env')

# Load environment variables from the .env file
load_dotenv(dotenv_path=env_path)

# Basic logging configuration
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)  # Add handler for console
    ]
)
logger = logging.getLogger(__name__)


# Bot settings
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
SCHEDULE_HOUR = int(os.getenv('SCHEDULE_HOUR'))
SCHEDULE_MINUTE = int(os.getenv('SCHEDULE_MINUTE'))

# Debug token
print(f"Token type: {type(TOKEN)}")
print(f"Token value: '{TOKEN}'")
print(f"Token length: {len(TOKEN) if TOKEN else 0}")
print(f"Contains colon: {':' in TOKEN if TOKEN else False}")

# Timezone configuration
TIMEZONE = pytz.timezone('America/New_York')

if not TOKEN:
    logger.error("Token do bot n√£o configurado")
    exit(1)

# Check if there's already a bot instance running
def is_bot_running():
    try:
        # Try to create a socket on port 12345
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.bind(('localhost', 12345))
        sock.close()
        return False
    except socket.error:
        logger.error("There is already a bot instance running")
        return True

# Check if there's already a bot instance running
if is_bot_running():
    logger.error("There is already a bot instance running. Shutting down.")
    exit(1)

bot = telebot.TeleBot(TOKEN)
scheduler = None

def send_scheduled_message():
    """Send the scheduled message"""
    if not CHAT_ID:
        logger.error("CHAT_ID not configured")
        return

    try:
        current_time = datetime.now(TIMEZONE)
        logger.info(f"Sending scheduled message at {current_time.strftime('%H:%M:%S')}")
        
        # Split IDs by comma and remove whitespace
        chat_ids = [id.strip() for id in CHAT_ID.split(',')]
        
        # Generate message using chatgpt_context
        chatgpt_message = chatgpt_context.generate_analysis()
        
        # Send message to each ID
        for chat_id in chat_ids:
            try:
                # Convert chat_id to integer
                chat_id = int(chat_id)
                # Send text message generated by ChatGPT
                bot.send_message(chat_id, chatgpt_message, parse_mode='Markdown')
                
                # Send CSV file
                file_date = datetime.now().strftime("%Y-%m-%d")
                csv_file_path = f"predicted_{file_date}.csv"
                
                # Check if file exists
                if os.path.exists(csv_file_path):
                    with open(csv_file_path, 'rb') as csv:
                        bot.send_document(chat_id, csv, caption="Here is the requested CSV file")
                    logger.info(f"CSV file sent successfully to chat_id: {chat_id}")
                else:
                    logger.error(f"CSV file not found: {csv_file_path}")
                
                logger.info(f"Message sent successfully to chat_id: {chat_id}")
            except telebot.apihelper.ApiTelegramException as e:
                error_message = str(e)
                if "group chat was upgraded to a supergroup chat" in error_message:
                    try:
                        # Extract the migrate_to_chat_id using regex
                        match = re.search(r'migrate_to_chat_id":\s*(-?\d+)', error_message)
                        if match:
                            new_chat_id = int(match.group(1))
                            logger.info(f"Group updated to supergroup. New chat_id: {new_chat_id}")
                            
                            # Try sending the message to the new chat ID
                            bot.send_message(new_chat_id,chatgpt_message)
                            
                            # Send the CSV file if it exists
                            if os.path.exists(csv_file_path):
                                with open(csv_file_path, 'rb') as csv:
                                    bot.send_document(new_chat_id, csv, caption="Here is the requested CSV file")
                                logger.info(f"CSV file sent successfully to new chat_id: {new_chat_id}")
                            
                            logger.info(f"Message sent successfully to new chat_id: {new_chat_id}")
                        else:
                            logger.error(f"Could not get new supergroup chat_id for {chat_id}")
                    except Exception as parse_error:
                        logger.error(f"Error processing supergroup update: {str(parse_error)}")
                else:
                    logger.error(f"Telegram error for chat_id {chat_id}: {error_message}")
            except Exception as e:
                logger.error(f"Error sending message/file to chat_id {chat_id}: {str(e)}")
                
    except Exception as e:
        logger.error(f"Error processing message sending: {str(e)}")

def main():
    try:
        logger.info("Starting bot...")
        
        # Check bot connection
        bot_info = bot.get_me()
        logger.info(f"Bot connected: {bot_info.username}")

        # Configure scheduler
        scheduler = BackgroundScheduler()
        
        # Add job with time from .env
        scheduler.add_job(
            send_scheduled_message,
            trigger=CronTrigger(
                hour=SCHEDULE_HOUR,
                minute=SCHEDULE_MINUTE,
                timezone=TIMEZONE
            ),
            id='send_message',
            name='Send daily message',
            replace_existing=True
        )
        
        scheduler.start()
        logger.info(f"Message scheduled for {SCHEDULE_HOUR:02d}:{SCHEDULE_MINUTE:02d} (New York time)")
        
        # Start polling
        bot.polling(none_stop=True)
        
    except Exception as e:
        logger.error(f"Bot error: {str(e)}")
    finally:
        if scheduler:
            scheduler.shutdown()
        logger.info("Bot shutdown")

if __name__ == "__main__":
    main()